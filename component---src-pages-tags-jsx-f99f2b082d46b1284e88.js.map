{"version":3,"sources":["webpack:///./src/components/PostList/index.jsx","webpack:///./src/pages/tags.jsx"],"names":["PostListWrapper","styled","div","PostWrapper","Date","p","props","theme","colors","tertiaryText","Excerpt","secondaryText","PostList","postList","useState","postCount","setPostCount","handleMoreLoad","document","documentElement","scrollHeight","scrollTop","clientHeight","length","setTimeout","useEffect","window","addEventListener","removeEventListener","slice","map","post","i","frontmatter","title","date","tags","excerpt","slug","fields","size","to","tagList","mt","mb","TagListWrapper","TagsPage","data","allMarkdownRemark","group","reverse","posts","nodes","selected","setSelected","filteredPosts","setFilteredPosts","query","location","search","filter","indexOf","q","queryString","parse","description","url","siteUrl","count","onClick","tag","console","log","navigate","alert"],"mappings":"sMAUMA,EAAkBC,UAAOC,IAAV,+EAAGD,CAAH,+CAMfE,EAAcF,UAAOC,IAAV,2EAAGD,CAAH,0FAUXG,EAAOH,UAAOI,EAAV,oEAAGJ,CAAH,oDAGC,SAAAK,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,gBAGjCC,EAAUT,UAAOI,EAAV,uEAAGJ,CAAH,uFAIF,SAAAK,GAAK,OAAIA,EAAMC,MAAMC,OAAOG,iBA6DxBC,IAjDE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,EAAkCC,mBAAS,IAApCC,EAAP,KAAkBC,EAAlB,KAEMC,EAAiB,KAAW,WAThCC,SAASC,gBAAgBC,aACvBF,SAASC,gBAAgBE,WAC3BH,SAASC,gBAAgBG,aAAe,KAQTP,EAAYF,EAASU,QAClDC,YAAW,kBAAMR,EAAaD,EAAY,MAAK,OAEhD,KAcH,OAZAU,qBAAU,WAGR,OAFAC,OAAOC,iBAAiB,SAAUV,GAE3B,WACLS,OAAOE,oBAAoB,SAAUX,MAEtC,CAACF,EAAWF,IAEfY,qBAAU,WACRT,EAAa,MACZ,CAACH,IAGF,kBAACb,EAAD,KACGa,EAASgB,MAAM,EAAGd,GAAWe,KAAI,SAACC,EAAMC,GACvC,MAA8BD,EAAKE,YAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,KACbC,EAAYN,EAAZM,QACAC,EAASP,EAAKQ,OAAdD,KAER,OACE,oCACE,kBAACnC,EAAD,KACE,kBAAC,IAAD,CAAOqC,KAAK,MACV,kBAAC,OAAD,CAAMC,GAAIH,GAAOJ,IAEnB,kBAAC9B,EAAD,KAAO+B,GACP,kBAACzB,EAAD,KAAU2B,GACV,kBAAC,IAAD,CAASK,QAASN,KAGnBrB,EAAY,IAAMiB,GAAKnB,EAASU,OAAS,IAAMS,GAC9C,kBAAC,IAAD,CAASW,GAAG,OAAOC,GAAG,gB,6OCtE9BC,EAAiB5C,UAAOC,IAAV,2EAAGD,CAAH,+DAyEL6C,UAjEE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZX,EAAO,IAASW,EAAKC,kBAAkBC,MAAO,CAAC,eAAeC,UAC9DC,EAAQJ,EAAKC,kBAAkBI,MAErC,EAAgCtC,qBAAzBuC,EAAP,KAAiBC,EAAjB,KACA,EAA0CxC,mBAAS,IAA5CyC,EAAP,KAAsBC,EAAtB,KAEIC,EAAQ,KAqBZ,MApBwB,oBAAbvC,WACTuC,EAAQvC,SAASwC,SAASC,QAG5BlC,qBAAU,WAMR+B,EALKH,EAMHO,IAAOT,GAAO,SAAApB,GAAI,OAAiD,IAA7CA,EAAKE,YAAYG,KAAKyB,QAAQR,MALnCF,KAOlB,CAACE,IAEJ5B,qBAAU,WACR,IAAMqC,EAAIC,IAAYC,MAAMP,GAAlB,EACVH,EAAYQ,KACX,CAACL,IAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKvB,MAAOA,QAAO+B,YAAaA,cAAaC,IAAKC,YAElD,kBAACtB,EAAD,KACGQ,EACC,kBAAC,IAAD,CAAOb,KAAK,MAAZ,aACae,EAAchC,OAD3B,QAEGgC,EAAchC,OAAS,GAAK,IAF/B,gBAEiD8B,EAFjD,KAKA,kBAAC,IAAD,CAAOb,KAAK,MAAZ,aACaJ,EAAKb,OADlB,OAC8Ba,EAAKb,OAAS,GAAK,IADjD,KAKF,kBAAC,IAAD,CACE6C,OAAK,EACL1B,QAASN,EACTiB,SAAUA,EACVgB,QAAS,SAAAC,GACPC,QAAQC,IAAIF,EAAKjB,GACbiB,IAAQjB,GACVoB,mBAAS,SACTC,MAAM,OACDpB,EAAYgB,OAKzB,kBAAC,IAAD,CAAe9B,KAAM,IAErB,kBAAC,IAAD,CAAU3B,SAAU0C","file":"component---src-pages-tags-jsx-f99f2b082d46b1284e88.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport _ from \"lodash\"\n\nimport { Link } from \"gatsby\"\n\nimport Title from \"components/Title\"\nimport Divider from \"components/Divider\"\nimport TagList from \"components/TagList\"\n\nconst PostListWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 10px;\n  }\n`\n\nconst PostWrapper = styled.div`\n  position: relative;\n  top: 0;\n  transition: all 0.5s;\n\n  @media (max-width: 768px) {\n    padding: 0 5px;\n  }\n`\n\nconst Date = styled.p`\n  margin-bottom: 1rem;\n  font-size: 0.9rem;\n  color: ${props => props.theme.colors.tertiaryText};\n`\n\nconst Excerpt = styled.p`\n  margin-bottom: 2rem;\n  line-height: 1.7;\n  font-size: 1rem;\n  color: ${props => props.theme.colors.secondaryText};\n  word-break: break-all;\n`\n\nconst checkIsScrollAtBottom = () => {\n  return (\n    document.documentElement.scrollHeight -\n      document.documentElement.scrollTop <=\n    document.documentElement.clientHeight + 100\n  )\n}\n\nconst PostList = ({ postList }) => {\n  const [postCount, setPostCount] = useState(10)\n\n  const handleMoreLoad = _.throttle(() => {\n    if (checkIsScrollAtBottom() && postCount < postList.length) {\n      setTimeout(() => setPostCount(postCount + 10), 300)\n    }\n  }, 250)\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleMoreLoad)\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleMoreLoad)\n    }\n  }, [postCount, postList])\n\n  useEffect(() => {\n    setPostCount(10)\n  }, [postList])\n\n  return (\n    <PostListWrapper>\n      {postList.slice(0, postCount).map((post, i) => {\n        const { title, date, tags } = post.frontmatter\n        const { excerpt } = post\n        const { slug } = post.fields\n\n        return (\n          <>\n            <PostWrapper>\n              <Title size=\"bg\">\n                <Link to={slug}>{title}</Link>\n              </Title>\n              <Date>{date}</Date>\n              <Excerpt>{excerpt}</Excerpt>\n              <TagList tagList={tags} />\n            </PostWrapper>\n\n            {postCount - 1 !== i && postList.length - 1 !== i && (\n              <Divider mt=\"3rem\" mb=\"2rem\" />\n            )}\n          </>\n        )\n      })}\n    </PostListWrapper>\n  )\n}\n\nexport default PostList\n","import React, { useState, useEffect } from \"react\"\nimport _ from \"lodash\"\nimport styled from \"styled-components\"\nimport SEO from \"components/SEO\"\nimport filter from \"lodash/filter\"\n\nimport { graphql, navigate } from \"gatsby\"\n\nimport queryString from \"query-string\"\n\nimport Layout from \"components/Layout\"\nimport Title from \"components/Title\"\nimport TagList from \"components/TagList\"\nimport PostList from \"components/PostList\"\nimport VerticleSpace from \"components/VerticalSpace\"\n\nimport { title, description, siteUrl } from \"../../blog-config\"\n\nconst TagListWrapper = styled.div`\n  margin-top: 20px;\n\n  @media (max-width: 768px) {\n    padding: 0 15px;\n  }\n`\n\nconst TagsPage = ({ data }) => {\n  const tags = _.sortBy(data.allMarkdownRemark.group, [\"totalCount\"]).reverse()\n  const posts = data.allMarkdownRemark.nodes\n\n  const [selected, setSelected] = useState()\n  const [filteredPosts, setFilteredPosts] = useState([])\n\n  let query = null\n  if (typeof document !== \"undefined\") {\n    query = document.location.search\n  }\n\n  useEffect(() => {\n    if (!selected) {\n      setFilteredPosts(posts)\n      return\n    }\n\n    setFilteredPosts(\n      filter(posts, post => post.frontmatter.tags.indexOf(selected) !== -1)\n    )\n  }, [selected])\n\n  useEffect(() => {\n    const q = queryString.parse(query)[\"q\"]\n    setSelected(q)\n  }, [query])\n\n  return (\n    <Layout>\n      <SEO title={title} description={description} url={siteUrl} />\n\n      <TagListWrapper>\n        {selected ? (\n          <Title size=\"sm\">\n            There are {filteredPosts.length} post\n            {filteredPosts.length > 1 && \"s\"} that match #{selected}.\n          </Title>\n        ) : (\n          <Title size=\"sm\">\n            There are {tags.length} tag{tags.length > 1 && \"s\"}.\n          </Title>\n        )}\n\n        <TagList\n          count\n          tagList={tags}\n          selected={selected}\n          onClick={tag => {\n            console.log(tag, selected)\n            if (tag === selected) {\n              navigate(\"/tags\")\n              alert(\"zz\")\n            } else setSelected(tag)\n          }}\n        />\n      </TagListWrapper>\n\n      <VerticleSpace size={2} />\n\n      <PostList postList={filteredPosts} />\n    </Layout>\n  )\n}\n\nexport default TagsPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      nodes {\n        excerpt(pruneLength: 200, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          update(formatString: \"MMM DD, YYYY\")\n          title\n          tags\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}